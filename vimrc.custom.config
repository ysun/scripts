"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置，若要增加、卸载插件，请放入~/.vimrc.custom.plugins）
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 开启相对行号
" set relativenumber  

" 开启鼠标
" set mouse=a

" 设置光标所在列高亮
" set cursorcolumn

" indentLine 开启代码对齐线
" let g:indentLine_enabled = 1

" markdown
" let system = system('uname -s')
" if system == "Darwin\n"
"     let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
" else
"     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
" endif
" nmap <silent> <F7> <Plug>MarkdownPreview
" imap <silent> <F7> <Plug>MarkdownPreview
" nmap <silent> <F8> <Plug>StopMarkdownPreview
" imap <silent> <F8> <Plug>StopMarkdownPreview

" Doxygen
" let g:DoxygenToolkit_authorName="chxuan, 787280310@qq.com"
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_briefTag_funcName="yes"
" let g:doxygen_enhanced_color=1
" let g:DoxygenToolkit_commentType="Qt"

"""""""""""""""""""""My Configure""""""""""""""""""""""""""
" Remove following plug:
" 1. Comment following line in .vimrc
" 2. Run :PlugClean  in VIM
"
" Plug 'junegunn/vim-slash'

set whichwrap-=<,>,h,l   " 关闭:设置光标键跨行
set virtualedit=   " 关闭:允许光标出现在最后一个字符的后面
set wrap "自动折行
set tabstop=8
set paste
set noexpandtab

" 在YouCompleteMe安装目录下搜索一个文件.ycm_extra_conf.py 啥都不需要改
" 同时需要提前安装一下：注：参数--clang-completer 很重要！！
" cd ~/.vim/plugged/YouCompleteMe/. && ./install.py --clang-completer
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/./third_party/ycmd/.ycm_extra_conf.py'

" ycm_show_diagnostics_ui is Toggle on eanble/disable YCM ! disable:0 enable:1
let g:ycm_show_diagnostics_ui = 0
let g:ycm_register_as_syntastic_checker = 0

" run :call DisableYCM() to disable YCM temporarily, and :call EnableYCM is to enable it again.
function DisableYCM()
	let b:ycm_largefile=1
	call sign_unplacelist(filter(sign_getplaced('%')[0].signs, {idx, val-> !match(val.name, 'Ycm')}))
	" NOTE: Highlights are global and may affect other things.
	hi clear Error
	hi clear Todo
	hi clear SpellBad
	hi clear SpellCap
endfunction

function EnableYCM()
	let b:ycm_largefile=0
	" NOTE: Highlights are global and may affect other things.
	hi Error term=reverse cterm=reverse ctermfg=131 gui=reverse guifg=#af5f5f
	hi Todo  term=standout cterm=reverse gui=reverse
	hi SpellBad term=reverse cterm=undercurl ctermfg=131 gui=undercurl guifg=#af5f5f
	hi SpellCap term=reverse cterm=undercurl ctermfg=73 gui=undercurl guifg=#5fafaf
endfunction

nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>
nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>

function! AutoLoadCTagsAndCScope()
    let max = 7
    let dir = './'
    let i = 0
    let break = 0
    while isdirectory(dir) && i < max
        if filereadable(dir . 'cscope.out')
            execute 'cs add ' . dir . 'cscope.out'
            let break = 1
        endif
"         if filereadable(dir . 'tags')
"             execute 'set tags =' . dir . 'tags'
"             let break = 1
"         endif
        if break == 1
            execute 'lcd ' . dir
            break
        endif
        let dir = dir . '../'
        let i = i + 1
    endwhile
    return break
endf

"To avoid the duplate add issue, I have no idea where is the other adding.
set nocscopeverbose

if filereadable("cscope.out")
    cs add cscope.out
else
    let ret = AutoLoadCTagsAndCScope()
    if ret  == 0
        cs add /home/xen/linux-vgt/cscope.out
    endif
endif

if has("cscope")
    set cscopetag   " 使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳来跳去
    " check cscope for definition of a symbol before checking ctags:
    " set to 1 if you want the reverse search order.
     set csto=1

     " add any cscope database in current directory
     " if filereadable("cscope.out")
     "    cs add cscope.out
     " else add the database pointed to by environment variable
     " elseif $CSCOPE_DB !=""
     "    cs add $CSCOPE_DB
     " endif

     " show msg when any other cscope db added
     set cscopeverbose

     nmap <C-j>s :cs find s <C-R>=expand("<cword>")<CR><CR>:wincmd j<CR>
     nmap <C-j>g :cs find g <C-R>=expand("<cword>")<CR><CR>:wincmd j<CR>
     nmap <C-j>c :cs find c <C-R>=expand("<cword>")<CR><CR>:wincmd j<CR>
     nmap <C-j>t :cs find t <C-R>=expand("<cword>")<CR><CR>:wincmd j<CR>
     nmap <C-j>e :cs find e <C-R>=expand("<cword>")<CR><CR>:wincmd j<CR>
     nmap <C-j>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:wincmd j<CR>
     nmap <C-j>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:wincmd j<CR>
     nmap <C-j>d :cs find d <C-R>=expand("<cword>")<CR><CR>:wincmd j<CR>
"    if has('quickfix')
"        set cscopequickfix=s-,c-,d-,i-,t-,e-
"    endif
endif

"nnoremap <C-j>s yiw:cs find s <C-R>=expand("<cword>")<CR><CR>:bd<CR>:cwindow<CR>/<C-R
""nnoremap <leader>s yiw:cs find s <C-R>=expand("<cword>")<CR><CR>:bd<CR>:cwindow<CR>/

set cscopequickfix=s-,c-,d-,i-,t-,e-,g-,f-

set hidden
let g:racer_experimental_completer = 1
let g:racer_insert_paren = 1

" ********** "vim-indent-guides 显示缩进线" **********
let g:indent_guides_enable_on_vim_startup = 1    "set indent guides enabled by defau
let g:indent_guides_auto_colors = 0   "Setting custom indent colors
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 1
let g:indent_guides_space_guides = 1
let g:indent_guides_tab_guides = 0

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=238
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=darkgray

" ********** "rainbow_parentheses 括号高亮增强版" **********
" let g:rbpt_colorpairs = [
"     \ ['brown',       'RoyalBlue3'],
"     \ ['gray',        'RoyalBlue3'],
"     \ ['Darkblue',    'SeaGreen3'],
"     \ ['darkgreen',   'firebrick3'],
"     \ ['darkcyan',    'RoyalBlue3'],
"     \ ['darkred',     'SeaGreen3'],
"     \ ['gray',        'RoyalBlue3'],
"     \ ]
" 
" let g:rbpt_max = 16   " 开启16对括号匹配
" let g:rbpt_loadcmd_toggle = 0
" 
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces

colorscheme desert
set paste
copen
set updatetime=0 " 我设置的是 2000 毫秒，即 2 秒 

autocmd vimenter * if !argc() | NERDTree | endif
map <F2> :NERDTreeToggle<CR>

map <F9> :call CallTaglistOrBar()<CR>
function! CallTaglistOrBar()
    if &filetype != 'go'
        let Tlist_Ctags_Cmd='ctags'                 "     基于ctags
        let Tlist_Auto_Open = 0                     "     默认打开Taglist
        let Tlist_Sort_Type = "name"                "     按照名称排序
        let Tlist_Show_One_File=1                   "     不同时显示多个文件的tag,只显示当前文件的
        let Tlist_Use_Right_Window = 0              "     在右侧显示窗口
        let Tlist_Compart_Format = 1                "     不显示空白行
        let Tlist_Exist_OnlyWindow = 1              "     如果只有一个buffer,kill窗口也kill掉buffer
        let Tlist_File_Fold_Auto_Close = 1          "     打开其他文件的时候自动关闭,只显示一个文件的tag
        let Tlist_Exit_OnlyWindow=1
        let Tlist_Auto_Update=1                     "     自动更新,包含新文件时候
        let Tlist_Enable_Fold_Column = 0            "     不要显示折叠树
        let Tlist_Use_Right_Window=1                "     右边显示 Left_Window 会左边显示
        let tlist_php_settings = 'php;c:class;i:interfaces;d:constant;f:function'
        map <F9> :TlistToggle<CR>
    else
        let g:tagbar_ctags_bin='ctags'
        let g:tagbar_width=30
        autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()　" 在某些情况下自动打开tagbar
        map <F9> :TagbarToggle<CR>
    endif
endfunction
